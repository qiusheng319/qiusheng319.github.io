{"pages":[],"posts":[{"title":"jbpm工作流","text":"概念维护节点、组，用户，任务之间的关系，控制流程结转的框架 安装和配置使用图形化流程设计器使用API控制流程","link":"/2019/01/30/jbpm工作流/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/01/25/hello-world/"},{"title":"markdown","text":"一级标题二级标题三级标题加粗加粗 斜体 斜粗体 高亮删除 This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing. 引用嵌套 12代码块代码块 无序列表 无序列表 无序列表 无序列表 无序列表 有序列表1.1. 有序列表 有序列表 文本描述http://www.baidu.com","link":"/2019/01/30/markdown/"},{"title":"Spring框架介绍","text":"Spring是什么？Spring是一个轻量级的一站式容器框架，它具有IOC，AOP两大核心特点 轻量级非侵入性，在开发过程中不依赖Spring的API。 一站式Spring可以整合各种企业级应用框架（如mybatis，hibernate等） 容器Spring包含并管理对象的生命周期 IOC（DI）即控制反转（依赖注入）通俗的说就是程序中对象的创建和销毁不再由程序本身的编码实现，而是由外部的Spring容器在程序运行时根据需要注入到程序中，也就是说对象的生命周期不再由程序本身决定，而是由容器来控制。这种控制权转移带来的好处就是降低对象之间的依赖关系，即解耦。 AOP：面向切面编程。 Spring怎么用？Bean的配置方式Spring容器通过全类名反射的方式创建对象的实例，所以class必须要有无参构造器 配置形式基于xml文件的方式基于注解的方式 IOC容器实现Spring 提供了两种类型的 IOC 容器实现.BeanFactory: IOC 容器的基本实现.ApplicationContext: 提供了更多的高级特性. 是 BeanFactory 的子接口.BeanFactory 是 Spring 框架的基础设施，面向 Spring 本身；ApplicationContext 面向使用 Spring 框架的开发者，几乎所有的应用场合都直接使用 ApplicationContext 而非底层的 BeanFactory 依赖注入方式属性注入：通过setter方法或者元素注入依赖的对象，属性注入是实际应用中最常用的注入方式构造器注入：通过构造方法注入依赖的对象 注入属性值细节字面值:基本数据类型及其封装类、String类型都可以采用字面值的注入方式引用其他的Bean:通过ref关键字指定对bean的引用内部Bean:内部Bean不能使用在其他任何地方Spring支持级联属性的配置 集合属性 &gt; &gt; &gt; 为property赋值使用util scheme定义集合使用p命名空间 自动装配byType根据类型自动装配byName根据名称自动装配 ③。使用外部属性文件（PropertyPlaceholderConfigurer）④。创建bean后置处理器（对bean初始化前后进行额外的处理）⑤。扫描+自动装配 事务①。事务的四个基本要素（ACID @原一隔久）②。事务的传播行为③。事务的并发问题（脏读，不可重复读，幻读）④。事务的隔离级别（不可重复读，串行） 源码","link":"/2019/02/01/spring/"},{"title":"spring框架","text":"","link":"/2019/01/30/spring框架/"}],"tags":[{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"基础","slug":"基础","link":"/tags/基础/"}],"categories":[{"name":"后端","slug":"后端","link":"/categories/后端/"}]}